{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Desktop\\\\hindustan-daily\\\\pages\\\\news\\\\[uid].js\";\nimport React from 'react';\nimport Article from '../../components/article';\n\nconst Post = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(Article, {\n      date: props.post.fields.date,\n      image: props.post.fields.image.fields,\n      title: props.post.fields.title,\n      url: props.post.fields.urlPath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticProps(context) {\n  // Create an instance of the Contentful JavaScript SDK\n  const client = require(\"contentful\").createClient({\n    space: process.env.CONTENTFUL_SPACE_ID,\n    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN\n  }); // Fetch all results where `fields.slug` is equal to the `slug` param\n\n\n  const result = await client.getEntries({\n    content_type: \"post\",\n    \"fields.urlPath\": context.params.slug\n  }).then(response => response.items); // Since `slug` was set to be a unique field, we can be confident that\n  // the only result in the query is the correct post.\n\n  const post = result.pop(); // If nothing was found, return an empty object for props, or else there would\n  // be an error when Next tries to serialize an `undefined` value to JSON.\n\n  if (!post) {\n    return {\n      props: {}\n    };\n  } // Return the post as props\n\n\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport async function getStaticPaths() {\n  // Create an instance of the Contentful JavaScript SDK\n  const client = require(\"contentful\").createClient({\n    space: process.env.CONTENTFUL_SPACE_ID,\n    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN\n  }); // Query Contentful for all blog posts in the space\n\n\n  const posts = await client.getEntries({\n    content_type: \"post\"\n  }).then(response => response.items); // Map the result of that query to a list of slugs.\n  // This will give Next the list of all blog post pages that need to be\n  // rendered at build time.\n\n  const paths = posts.map(({\n    fields: {\n      urlPath\n    }\n  }) => ({\n    params: {\n      slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport default Post;","map":{"version":3,"sources":["C:/Users/HOME/Desktop/hindustan-daily/pages/news/[uid].js"],"names":["React","Article","Post","props","post","fields","date","image","title","urlPath","getStaticProps","context","client","require","createClient","space","process","env","CONTENTFUL_SPACE_ID","accessToken","CONTENTFUL_ACCESS_TOKEN","result","getEntries","content_type","params","slug","then","response","items","pop","getStaticPaths","posts","paths","map","fallback"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAAG;AAEnB,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACE,QAAC,OAAD;AACE,MAAA,IAAI,EAAEA,KAAK,CAACC,IAAN,CAAWC,MAAX,CAAkBC,IAD1B;AAEE,MAAA,KAAK,EAAEH,KAAK,CAACC,IAAN,CAAWC,MAAX,CAAkBE,KAAlB,CAAwBF,MAFjC;AAGE,MAAA,KAAK,EAAEF,KAAK,CAACC,IAAN,CAAWC,MAAX,CAAkBG,KAH3B;AAIE,MAAA,GAAG,EAAEL,KAAK,CAACC,IAAN,CAAWC,MAAX,CAAkBI;AAJzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAZD;;AAcA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMC,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAAtB,CAAmC;AAChDC,IAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBAD6B;AAEhDC,IAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFuB,GAAnC,CAAf,CAF4C,CAO5C;;;AACA,QAAMC,MAAM,GAAG,MAAMT,MAAM,CACxBU,UADkB,CACP;AACVC,IAAAA,YAAY,EAAE,MADJ;AAEV,sBAAkBZ,OAAO,CAACa,MAAR,CAAeC;AAFvB,GADO,EAKlBC,IALkB,CAKZC,QAAD,IAAcA,QAAQ,CAACC,KALV,CAArB,CAR4C,CAe5C;AACA;;AACA,QAAMxB,IAAI,GAAGiB,MAAM,CAACQ,GAAP,EAAb,CAjB4C,CAmB5C;AACA;;AACA,MAAI,CAACzB,IAAL,EAAW;AACT,WAAO;AAAED,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD,GAvB2C,CAyB5C;;;AACA,SAAO;AACLA,IAAAA,KAAK,EAAE;AACLC,MAAAA;AADK;AADF,GAAP;AAKD;AAED,OAAO,eAAe0B,cAAf,GAAgC;AACrC;AACA,QAAMlB,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAAtB,CAAmC;AAChDC,IAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBAD6B;AAEhDC,IAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFuB,GAAnC,CAAf,CAFqC,CAOrC;;;AACA,QAAMW,KAAK,GAAG,MAAMnB,MAAM,CACvBU,UADiB,CACN;AAAEC,IAAAA,YAAY,EAAE;AAAhB,GADM,EAEjBG,IAFiB,CAEXC,QAAD,IAAcA,QAAQ,CAACC,KAFX,CAApB,CARqC,CAYrC;AACA;AACA;;AACA,QAAMI,KAAK,GAAGD,KAAK,CAACE,GAAN,CAAU,CAAC;AAAE5B,IAAAA,MAAM,EAAE;AAAEI,MAAAA;AAAF;AAAV,GAAD,MAA8B;AAAEe,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAA9B,CAAV,CAAd;AAEA,SAAO;AACLO,IAAAA,KADK;AAELE,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AAED,eAAehC,IAAf","sourcesContent":["import React from 'react'\r\nimport Article from '../../components/article'\r\n\r\nconst Post = props =>{\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <Article\r\n        date={props.post.fields.date}\r\n        image={props.post.fields.image.fields}\r\n        title={props.post.fields.title}\r\n        url={props.post.fields.urlPath}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // Create an instance of the Contentful JavaScript SDK\r\n  const client = require(\"contentful\").createClient({\r\n    space: process.env.CONTENTFUL_SPACE_ID,\r\n    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\r\n  })\r\n\r\n  // Fetch all results where `fields.slug` is equal to the `slug` param\r\n  const result = await client\r\n    .getEntries({\r\n      content_type: \"post\",\r\n      \"fields.urlPath\": context.params.slug,\r\n    })\r\n    .then((response) => response.items)\r\n\r\n  // Since `slug` was set to be a unique field, we can be confident that\r\n  // the only result in the query is the correct post.\r\n  const post = result.pop()\r\n\r\n  // If nothing was found, return an empty object for props, or else there would\r\n  // be an error when Next tries to serialize an `undefined` value to JSON.\r\n  if (!post) {\r\n    return { props: {} }\r\n  }\r\n\r\n  // Return the post as props\r\n  return {\r\n    props: {\r\n      post,\r\n    },\r\n  }\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  // Create an instance of the Contentful JavaScript SDK\r\n  const client = require(\"contentful\").createClient({\r\n    space: process.env.CONTENTFUL_SPACE_ID,\r\n    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\r\n  })\r\n\r\n  // Query Contentful for all blog posts in the space\r\n  const posts = await client\r\n    .getEntries({ content_type: \"post\" })\r\n    .then((response) => response.items)\r\n\r\n  // Map the result of that query to a list of slugs.\r\n  // This will give Next the list of all blog post pages that need to be\r\n  // rendered at build time.\r\n  const paths = posts.map(({ fields: { urlPath } }) => ({ params: { slug } }))\r\n\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  }\r\n}\r\n\r\nexport default Post\r\n"]},"metadata":{},"sourceType":"module"}